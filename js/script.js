// Generated by CoffeeScript 1.6.3
(function() {
  var Conversation,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.duck.App = (function() {
    function App() {
      this.bill = new duck.Bill($(this));
      this.brain = new duck.Brain($(this));
    }

    return App;

  })();

  $(function() {
    return new duck.App;
  });

  duck.Bill = (function() {
    function Bill(duck) {
      this.duck = duck;
      this.navigation = new window.duck.Navigation(this.duck);
      this.success = new window.duck.Success(this.duck);
      this.renderer = new window.duck.Renderer(this.duck);
      this.ears = new window.duck.Ears(this.duck);
      this.duck.trigger('print_question', "Can you describe your problem in a paragraph? use small sentences please I'm only a duck");
      this.duck.trigger('print_long');
    }

    return Bill;

  })();

  Conversation = (function() {
    function Conversation() {
      this.conversation = [];
    }

    Conversation.prototype.add = function(question, answer) {
      return this.conversation.push({
        question: question,
        answer: answer
      });
    };

    return Conversation;

  })();

  duck.Ears = (function() {
    function Ears(duck) {
      this.duck = duck;
      this.quack = __bind(this.quack, this);
      this.check_key = __bind(this.check_key, this);
      this.bindUI();
    }

    Ears.prototype.bindUI = function() {
      return $('#duck').on({
        keyup: this.check_key
      }, '.current');
    };

    Ears.prototype.check_key = function(event) {
      if (event.keyCode === 13) {
        return this.quack();
      }
    };

    Ears.prototype.quack = function() {
      console.log('quack');
      this.duck.trigger('answer', {
        message: $('#duck .current').val(),
        render: console.log
      });
      return this.duck.trigger('strip_current');
    };

    return Ears;

  })();

  window.duck.Navigation = (function() {
    function Navigation(duck) {
      this.duck = duck;
      this.go = __bind(this.go, this);
      this.bindUI = __bind(this.bindUI, this);
      this.bindUI();
    }

    Navigation.prototype.bindUI = function() {
      return $('nav a').click(this.go);
    };

    Navigation.prototype.go = function(event) {
      var link, target;
      event.preventDefault();
      link = $(event.currentTarget);
      target = $(link.attr('href'));
      return $('html, body').animate({
        scrollTop: target.offset().top
      }, 500);
    };

    return Navigation;

  })();

  duck.Brain = (function() {
    function Brain(duck) {
      this.duck = duck;
      $(this.duck).on('quack', this.quack);
    }

    Brain.prototype.quack = function(event, options) {
      console.log(options.message);
      return options.render("I'm sorry, Dave, I just don't know.");
    };

    return Brain;

  })();

  window.duck.Renderer = (function() {
    function Renderer(duck) {
      this.duck = duck;
      this.strip_current = __bind(this.strip_current, this);
      this.print_short = __bind(this.print_short, this);
      this.print_long = __bind(this.print_long, this);
      this.print_answer = __bind(this.print_answer, this);
      this.print_question = __bind(this.print_question, this);
      this.container = $('#duck');
      this.question_template = $('#template_question').html();
      this.answer_template = $('#template_answer').html();
      this.long_template = $('#template_long').html();
      this.short_template = $('#template_short').html();
      this.duck.on('print_question', this.print_question);
      this.duck.on('print_answer', this.print_answer);
      this.duck.on('print_short', this.print_short);
      this.duck.on('print_long', this.print_long);
      this.duck.on('strip_current', this.strip_current);
    }

    Renderer.prototype.print_question = function(event, text) {
      return this.container.append(Mustache.render(this.question_template, {
        question: text
      }));
    };

    Renderer.prototype.print_answer = function(event, text) {
      return this.container.append(Mustache.render(this.answer_template, {
        answer: text
      }));
    };

    Renderer.prototype.print_long = function(event) {
      return this.container.append(Mustache.render(this.long_template, {}));
    };

    Renderer.prototype.print_short = function(event, text) {
      return this.container.append(Mustache.render(this.short_template, {}));
    };

    Renderer.prototype.strip_current = function() {
      var val;
      val = $('#duck .current').val();
      this.print_answer('', val);
      return $('#duck .current').remove();
    };

    return Renderer;

  })();

  window.duck.Success = (function() {
    function Success(duck) {
      this.duck = duck;
      this.done = __bind(this.done, this);
      this.bindUI = __bind(this.bindUI, this);
      this.bindUI();
    }

    Success.prototype.bindUI = function() {
      return $('.done').click(this.done);
    };

    Success.prototype.done = function(event) {
      event.preventDefault();
      return $('.congratulations').slideDown();
    };

    return Success;

  })();

}).call(this);
