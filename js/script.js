// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.duck.App = (function() {

    function App() {
      this.bill = new duck.Bill(this);
      this.brain = new duck.Brain(this);
    }

    return App;

  })();

  $(function() {
    return window.exposed_duck = new duck.App;
  });

  duck.Bill = (function() {

    function Bill(duck) {
      this.duck = duck;
      this.navigation = new window.duck.Navigation(this.duck);
      this.success = new window.duck.Success(this.duck);
    }

    return Bill;

  })();

  duck.Brain = (function() {

    function Brain(duck) {
      this.duck = duck;
      this.state = new duck.FitnessStateMachine();
      $(this.duck).on('quack', this.quack);
    }

    Brain.prototype.quack = function(event, options) {
      return $(this.duck).trigger('response', {
        next_question: 'Why?',
        answer_type: 'short'
      });
    };

    return Brain;

  })();

  duck.FitnessStateMachine = (function() {

    function FitnessStateMachine() {
      this.visited_states = [];
      this.current_state = null;
      this.noun = null;
    }

    FitnessStateMachine.prototype.getNext = function(answer) {
      var state, _i, _len, _ref;
      this.answer = answer;
      if (this.current_state) {
        this.current_state.post_action();
      }
      _ref = this.states(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        state = _ref[_i];
        if (state.qualifies()) {
          this.current_state = state;
          state.pre_action();
          return state.question();
        }
      }
    };

    FitnessStateMachine.prototype.states = function(machine) {
      return [
        {
          qualifies: function() {
            return this.visited_states.length === 0;
          },
          pre_action: function() {},
          post_action: function() {},
          question: function() {
            return "Can you describe the problem in a paragraph? Please use small sentances, I'm only a duck.";
          },
          input: function() {
            return 'short';
          }
        }, {
          qualifies: function() {
            return this.visited_states.length === 0;
          },
          pre_action: function() {},
          post_action: function() {},
          question: function() {
            return "Is " + machine.noun + " the thing that has the problem?";
          }
        }
      ];
    };

    return FitnessStateMachine;

  })();

  window.duck.Navigation = (function() {

    function Navigation(duck) {
      this.duck = duck;
      this.go = __bind(this.go, this);

      this.bindUI = __bind(this.bindUI, this);

      this.bindUI();
    }

    Navigation.prototype.bindUI = function() {
      return $('nav a').click(this.go);
    };

    Navigation.prototype.go = function(event) {
      var link, target;
      event.preventDefault();
      link = $(event.currentTarget);
      target = $(link.attr('href'));
      return $('html, body').animate({
        scrollTop: target.offset().top
      }, 2000);
    };

    return Navigation;

  })();

  duck.PatternMatcher = (function() {

    function PatternMatcher(str) {
      this.str = str;
    }

    PatternMatcher.prototype.toString = function() {
      return this.str;
    };

    PatternMatcher.prototype.toClauses = function() {
      var clause, _i, _len, _ref, _results;
      _ref = this.str.split(this.clauseBoundryRegex());
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        clause = _ref[_i];
        _results.push(new duck.PatternMatcher(clause));
      }
      return _results;
    };

    PatternMatcher.prototype.toLikelyNouns = function() {
      var found_nouns, match, noun, _i, _len, _ref;
      found_nouns = [];
      _ref = this.toClauses();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        match = _ref[_i];
        noun = match.findNoun();
        if (!this.discountNoun(noun)) {
          found_nouns.push(noun);
        }
      }
      console.log(found_nouns);
      return found_nouns;
    };

    PatternMatcher.prototype.findNoun = function() {
      var match;
      match = this.str.match(this.nounMatcher());
      if (match) {
        return match[1];
      }
      return false;
    };

    PatternMatcher.prototype.clauseBoundryRegex = function() {
      return /(?:\s*\.\s*| and | or | but | although | except (?:that))/;
    };

    PatternMatcher.prototype.nounMatcher = function() {
      return /(?:(?:(.+)|it) is|i have a (.+)|my (.+)|this (?:(.+)|is ))/i;
    };

    PatternMatcher.prototype.discountNoun = function(noun) {
      if (!noun) {
        return true;
      }
      if (noun === '') {
        return true;
      }
      console.log("looking at noun " + noun);
      return noun === 'it' || noun === 'this' || noun === 'that' || noun === 'my app' || noun === 'this app';
    };

    return PatternMatcher;

  })();

  window.duck.Success = (function() {

    function Success(duck) {
      this.duck = duck;
      this.done = __bind(this.done, this);

      this.bindUI = __bind(this.bindUI, this);

      this.bindUI();
    }

    Success.prototype.bindUI = function() {
      return $('.done').click(this.done);
    };

    Success.prototype.done = function(event) {
      event.preventDefault();
      return $('.congratulations').slideDown();
    };

    return Success;

  })();

}).call(this);
