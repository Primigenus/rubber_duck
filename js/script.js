// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.duck.App = (function() {
    function App() {
      this.bill = new duck.Bill($(this));
      this.brain = new duck.Brain($(this));
    }

    return App;

  })();

  $(function() {
    return window.exposed_duck = new duck.App;
  });

  duck.Bill = (function() {
    function Bill(duck) {
      this.duck = duck;
      this.navigation = new window.duck.Navigation(this.duck);
      this.success = new window.duck.Success(this.duck);
      this.renderer = new window.duck.Renderer(this.duck);
      this.ears = new window.duck.Ears(this.duck);
    }

    return Bill;

  })();

  duck.Brain = (function() {
    function Brain(app) {
      this.app = app;
      this.reset = __bind(this.reset, this);
      this.quack = __bind(this.quack, this);
      this.reset();
      $(this.app).on('quack', this.quack);
      $(this.app).on('reset', this.reset);
    }

    Brain.prototype.quack = function(event, options) {
      var state;
      state = this.machine.getNext(options.message);
      return $(this.app).trigger('response', state);
    };

    Brain.prototype.reset = function(event, options) {
      this.machine = new duck.FitnessStateMachine();
      return this.quack({}, {});
    };

    return Brain;

  })();

  duck.Ears = (function() {
    function Ears(duck) {
      this.duck = duck;
      this.reset = __bind(this.reset, this);
      this.quack = __bind(this.quack, this);
      this.check_key = __bind(this.check_key, this);
      this.bindUI();
    }

    Ears.prototype.bindUI = function() {
      $('#duck').on({
        keyup: this.check_key
      }, '.current');
      $('#duck').on({
        click: this.quack
      }, '.current_submit');
      return $('#duck').on({
        click: this.reset
      }, '.current_reset');
    };

    Ears.prototype.check_key = function(event) {
      if (event.keyCode === 13) {
        return this.quack();
      }
    };

    Ears.prototype.quack = function(event) {
      if (event) {
        event.preventDefault();
      }
      return this.duck.trigger('quack', {
        message: $('#duck .current').val()
      });
    };

    Ears.prototype.reset = function(event) {
      if (event) {
        event.preventDefault();
      }
      return this.duck.trigger('reset');
    };

    return Ears;

  })();

  window.duck.Navigation = (function() {
    function Navigation(duck) {
      this.duck = duck;
      this.go = __bind(this.go, this);
      this.bindUI = __bind(this.bindUI, this);
      this.bindUI();
    }

    Navigation.prototype.bindUI = function() {
      return $('nav a').click(this.go);
    };

    Navigation.prototype.go = function(event) {
      var link, target;
      event.preventDefault();
      link = $(event.currentTarget);
      target = $(link.attr('href'));
      return $('html, body').animate({
        scrollTop: target.offset().top
      }, 500);
    };

    return Navigation;

  })();

  duck.PatternMatcher = (function() {
    function PatternMatcher(str) {
      this.str = str;
    }

    PatternMatcher.prototype.toString = function() {
      return this.str;
    };

    PatternMatcher.prototype.toClauses = function() {
      var clause, _i, _len, _ref, _results;
      _ref = this.str.split(this.clauseBoundryRegex());
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        clause = _ref[_i];
        _results.push(new duck.PatternMatcher(clause));
      }
      return _results;
    };

    PatternMatcher.prototype.toLikelyNouns = function() {
      var found_nouns, match, noun, _i, _len, _ref;
      found_nouns = [];
      _ref = this.toClauses();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        match = _ref[_i];
        noun = match.findNoun();
        if (!this.disqualifyNoun(noun)) {
          found_nouns.push(noun);
        }
      }
      console.log(found_nouns);
      return found_nouns;
    };

    PatternMatcher.prototype.findNoun = function() {
      var match;
      match = this.str.match(this.nounMatcher());
      if (match) {
        return match[1];
      }
      return false;
    };

    PatternMatcher.prototype.clauseBoundryRegex = function() {
      return /(?:\s*\.\s*| and | or | but | although | except (?:that))/;
    };

    PatternMatcher.prototype.nounMatcher = function() {
      return /(?:this )?(?:(?:(.+)|it)(?: is| is| ain't| aint| does|'s)|i have a (.+)|my (.+))/i;
    };

    PatternMatcher.prototype.disqualifyNoun = function(noun) {
      if (!noun) {
        return true;
      }
      if (noun === '') {
        return true;
      }
      return noun === 'it' || noun === 'this' || noun === 'that' || noun === 'my app' || noun === 'this app';
    };

    return PatternMatcher;

  })();

  window.duck.Renderer = (function() {
    function Renderer(duck) {
      this.duck = duck;
      this.strip_current = __bind(this.strip_current, this);
      this.print_reset = __bind(this.print_reset, this);
      this.print_short = __bind(this.print_short, this);
      this.print_long = __bind(this.print_long, this);
      this.print_answer = __bind(this.print_answer, this);
      this.print_question = __bind(this.print_question, this);
      this.response = __bind(this.response, this);
      this.container = $('#duck');
      this.question_template = $('#template_question').html();
      this.answer_template = $('#template_answer').html();
      this.long_template = $('#template_long').html();
      this.short_template = $('#template_short').html();
      this.reset_template = $('#template_reset').html();
      this.duck.on('response', this.response);
    }

    Renderer.prototype.response = function(event, options) {
      this.strip_current();
      this.print_question(options.next_question);
      return this['print_' + options.answer_type]();
    };

    Renderer.prototype.print_question = function(text) {
      return this.container.append(Mustache.render(this.question_template, {
        question: text
      }));
    };

    Renderer.prototype.print_answer = function(text) {
      return this.container.append(Mustache.render(this.answer_template, {
        answer: text
      }));
    };

    Renderer.prototype.print_long = function() {
      this.container.append(Mustache.render(this.long_template, {}));
      return $('#duck .current').focus();
    };

    Renderer.prototype.print_short = function() {
      this.container.append(Mustache.render(this.short_template, {}));
      return $('#duck .current').focus();
    };

    Renderer.prototype.print_reset = function() {
      return this.container.append(Mustache.render(this.reset_template, {}));
    };

    Renderer.prototype.strip_current = function() {
      var val;
      val = $('#duck .current').val();
      if (val) {
        this.print_answer(val);
      }
      return $('#duck .current, #duck .current_submit, .current_reset').remove();
    };

    return Renderer;

  })();

  window.duck.Success = (function() {
    function Success(duck) {
      this.duck = duck;
      this.done = __bind(this.done, this);
      this.bindUI = __bind(this.bindUI, this);
      this.bindUI();
    }

    Success.prototype.bindUI = function() {
      return $('.done').click(this.done);
    };

    Success.prototype.done = function(event) {
      event.preventDefault();
      return $('.congratulations').slideDown();
    };

    return Success;

  })();

}).call(this);
